// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemplateNodePool template node pool
// swagger:model TemplateNodePool
type TemplateNodePool struct {

	// Number of nodes in this node pool
	// Required: true
	// Minimum: 1
	Count *int32 `json:"count"`

	// Docker version of this node pool (excluding leading 'v')
	DockerVersion string `json:"docker_version,omitempty"`

	// true if etcd runs on this node pool, else false (required if kubernetes_mode == master)
	Etcd bool `json:"etcd,omitempty"`

	// true if this is a GPU node pool, else false
	Gpu bool `json:"gpu,omitempty"`

	// true if this node pool is schedulable, else false (required if kubernetes_mode == master)
	IsSchedulable bool `json:"is_schedulable,omitempty"`

	// Kubernetes mode of this node pool (master or worker)
	// Required: true
	// Enum: [master worker]
	KubernetesMode *string `json:"kubernetes_mode"`

	// Kubernetes version of this node pool (excluding leading 'v')
	// Required: true
	KubernetesVersion *string `json:"kubernetes_version"`

	// Name of this node pool
	// Required: true
	Name *string `json:"name"`

	// Operating System
	// Required: true
	// Enum: [centos rhel ubuntu]
	Os *string `json:"os"`

	// Type of this resource (always node_pool)
	// Required: true
	// Enum: [node_pool]
	Type *string `json:"type"`
}

// Validate validates this template node pool
func (m *TemplateNodePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplateNodePool) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("count", "body", int64(*m.Count), 1, false); err != nil {
		return err
	}

	return nil
}

var templateNodePoolTypeKubernetesModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["master","worker"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templateNodePoolTypeKubernetesModePropEnum = append(templateNodePoolTypeKubernetesModePropEnum, v)
	}
}

const (

	// TemplateNodePoolKubernetesModeMaster captures enum value "master"
	TemplateNodePoolKubernetesModeMaster string = "master"

	// TemplateNodePoolKubernetesModeWorker captures enum value "worker"
	TemplateNodePoolKubernetesModeWorker string = "worker"
)

// prop value enum
func (m *TemplateNodePool) validateKubernetesModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, templateNodePoolTypeKubernetesModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TemplateNodePool) validateKubernetesMode(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_mode", "body", m.KubernetesMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateKubernetesModeEnum("kubernetes_mode", "body", *m.KubernetesMode); err != nil {
		return err
	}

	return nil
}

func (m *TemplateNodePool) validateKubernetesVersion(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_version", "body", m.KubernetesVersion); err != nil {
		return err
	}

	return nil
}

func (m *TemplateNodePool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var templateNodePoolTypeOsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["centos","rhel","ubuntu"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templateNodePoolTypeOsPropEnum = append(templateNodePoolTypeOsPropEnum, v)
	}
}

const (

	// TemplateNodePoolOsCentos captures enum value "centos"
	TemplateNodePoolOsCentos string = "centos"

	// TemplateNodePoolOsRhel captures enum value "rhel"
	TemplateNodePoolOsRhel string = "rhel"

	// TemplateNodePoolOsUbuntu captures enum value "ubuntu"
	TemplateNodePoolOsUbuntu string = "ubuntu"
)

// prop value enum
func (m *TemplateNodePool) validateOsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, templateNodePoolTypeOsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TemplateNodePool) validateOs(formats strfmt.Registry) error {

	if err := validate.Required("os", "body", m.Os); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsEnum("os", "body", *m.Os); err != nil {
		return err
	}

	return nil
}

var templateNodePoolTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["node_pool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templateNodePoolTypeTypePropEnum = append(templateNodePoolTypeTypePropEnum, v)
	}
}

const (

	// TemplateNodePoolTypeNodePool captures enum value "node_pool"
	TemplateNodePoolTypeNodePool string = "node_pool"
)

// prop value enum
func (m *TemplateNodePool) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, templateNodePoolTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TemplateNodePool) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemplateNodePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemplateNodePool) UnmarshalBinary(b []byte) error {
	var res TemplateNodePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
